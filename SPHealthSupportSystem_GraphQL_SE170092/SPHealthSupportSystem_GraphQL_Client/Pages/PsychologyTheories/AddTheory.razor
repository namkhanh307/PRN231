@page "/add-theory"
@using SPHealthSupportSystem_GraphQL_Client.Models
@using SPHealthSupportSystem_GraphQL_Client.GraphQLService
@inject GraphQLService graphQLService
@inject NavigationManager Navigation

<h3>Thêm Lý Thuyết Mới</h3>

<!-- Form Thêm Lý Thuyết -->
<EditForm Model="newTheory" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label>ID:</label>
    <InputNumber class="form-control" @bind-Value="newTheory.Id" />
    <label>Tên:</label>
    <InputText class="form-control" @bind-Value="newTheory.Name" />

    <label>Mô tả:</label>
    <InputTextArea class="form-control" @bind-Value="newTheory.Description" />

    <label>Tác giả:</label>
    <InputText class="form-control" @bind-Value="newTheory.Author" />

    <label>Chọn Chủ Đề:</label>
    <select class="form-control" @bind="newTheory.TopicId">
            <option value="">-- Chọn một Topic --</option>
            @foreach (var topic in topics)
            {
                <option value="@topic.Id">@topic.Name</option>
            }
     </select>

    <label>Năm xuất bản:</label>
    <InputNumber class="form-control" @bind-Value="newTheory.YearPublished" />

    <label>Loại lý thuyết:</label>
    <InputText class="form-control" @bind-Value="newTheory.TheoryType" />

    <label>Nguyên lý:</label>
    <InputText class="form-control" @bind-Value="newTheory.Principle" />

    <label>Ứng dụng:</label>
    <InputText class="form-control" @bind-Value="newTheory.Application" />

    <label>Lý thuyết liên quan:</label>
    <InputText class="form-control" @bind-Value="newTheory.RelatedTheory" />

    <label>Phê bình:</label>
    <InputText class="form-control" @bind-Value="newTheory.Criticism" />

    <button class="btn btn-success mt-2" type="submit">Lưu</button>
    <button class="btn btn-secondary mt-2" @onclick="Cancel">Hủy</button>
</EditForm>

@if (isLoading)
{
    <p>Đang tải...</p>
}

@code {
    private PsychologyTheory newTheory = new PsychologyTheory();
    private List<Topic> topics = new List<Topic>();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTopics();
    }

    private async Task LoadTopics()
    {
        isLoading = true;
        topics = await graphQLService.GetAllTopicsAsync();
        isLoading = false;
    }

    private async Task HandleValidSubmit()
    {
        // Gọi API tạo lý thuyết mới
        var id = await graphQLService.CreatePsychologyTheoryAsync(newTheory);
        Navigation.NavigateTo("/psychology-theories");
    }
    private void PrintTopicId()
    {
        Console.WriteLine($"Selected TopicId: {newTheory.TopicId}");
    }
    private void Cancel()
    {
        Navigation.NavigateTo("/psychology-theories");
    }
}
